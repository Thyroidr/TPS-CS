<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Binary Search and Algorithmic Analysis</title>
      <link href="/TPS-CS/Binary-Search-and-Algorithmic-Analysis/"/>
      <url>/TPS-CS/Binary-Search-and-Algorithmic-Analysis/</url>
      
        <content type="html"><![CDATA[<p>Consider a list of numbers in increasing order (that is, every number except the first is bigger than the previous number), e.g.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">7</span> <span class="number">8</span> <span class="number">12</span> <span class="number">14</span> <span class="number">15</span> <span class="number">22</span> <span class="number">23</span> <span class="number">26</span> <span class="number">29</span></span><br></pre></td></tr></table></figure><p>Suppse we want to develop an efficient method (algorithm) to find the smallest number in the list, that is larger than $x$. The simple method is just to iterate over the list, maintaining the smallest number larger than x that we have iterated so far and updating it at every step of iteration. This has a time complexity linear to the size of the list (which we will denote using $n$), we describe this using the Big-O notation $O(n)$.</p><p>The Big-O notation roughly describes the number of computations needed to run an algorithm, in relation to some variables (in the above case $n$). Let the actual number of computations needed be function $a$, then contents of $O(\ldots)$ is a function $f$, such that for some $[k, \infty]$ values of the variables, $\exists l, h: lf \le a \le hf$. You can simply understand this as $f$ is a basic expression that best approximates $a$. </p><p>The major question in informatics is how can we minimise the time complexity to solve certain problems. In this case, $O(n)$ is considered a poor time complexity. A time complexity of $O(\log_2 n)$ can be achieved using a technique of binary search ($\log_2 n$ grows much slower compared to $n$, when $n = 10^6$, $\log_2 n \le 20$).<br><a id="more"></a></p><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><p>The technique uses the fact the numbers are sorted (the list is <strong>monotonic</strong>). In the following precedure, we denote the range the answer could be in as $[l, r]$, and the $i$-th element of the list as $A_i$. </p><h3 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h3><ol><li>Let us denote the number of numbers in the list as $n$. We will also set $l$ to $1$ and $r$ to $n$. </li><li>If $l = r$, then we have found the answer, it is the $l$-th element, terminate.</li><li>Set $m$ (the middle element of $[l, r]$) to the floor of $\frac{l+r}{2}$.</li><li>If $A_m \le x$ , set $l$ to $m+1$, else set $r$ to $m$, go to step 2.</li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line"><span class="keyword">while</span>(l != r)&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(A[m] &lt;= x)</span><br><span class="line">        l = m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r = m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h3><p>Notice that $\log_2 k$ essentially means how many times do we need to divide $k$ by $2$ to get something smaller than 1 (only for positive $k$’s). Discuss why $O(\log_2 n)$ might be the time complexity for binary search.</p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Google Kick Start 2019 Practice Round: <a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051060/00000000000588f4" target="_blank" rel="noopener">https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051060/00000000000588f4</a></p><p>This problem might take you a long time thinking or googling about binary search<br>FARIO 2009: <a href="http://orac.amt.edu.au/cgi-bin/train/problem.pl?problemid=378" target="_blank" rel="noopener">http://orac.amt.edu.au/cgi-bin/train/problem.pl?problemid=378</a></p><p>Ctrl-A for hint:<br><span style="color:white">Consider binary searching the possible answers and then testing if they are possible</span></p>]]></content>
      
      
      <categories>
          
          <category> intro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic C++: Conditional Statements and Loops</title>
      <link href="/TPS-CS/Basic-C++/Basic-C-Conditional-Statements-and-Loops/"/>
      <url>/TPS-CS/Basic-C++/Basic-C-Conditional-Statements-and-Loops/</url>
      
        <content type="html"><![CDATA[<h2 id="Boolean-Operators"><a href="#Boolean-Operators" class="headerlink" title="Boolean Operators"></a>Boolean Operators</h2><p>In addition to the arithmetic operators, there are also the boolean (logic) operators in C++. These are the operators that return a <code>true</code> value or a <code>false</code> value. <code>true</code> and <code>false</code> values can be replaced with <code>1</code> and <code>0</code> respectively, although really, in C++, <code>0</code> is <code>false</code>, and everything else is <code>true</code>. </p><p>The operators below can be used to compare regular variables (so long as they have the operators defined, you don’t need to worry abot this).</p><table><thead><tr><th>Operator</th><th>Function</th><th>Example</th></tr></thead><tbody><tr><td><code>==</code></td><td>returns true if the values of the operands are equal</td><td><code>a == b</code></td></tr><tr><td><code>&gt;=</code></td><td>returns true if the value of the left operand is greater than or equal to the right operator</td><td><code>a &gt;= b</code></td></tr><tr><td><code>&lt;=</code></td><td>returns true if the value of the left operand is lower than or equal to the right operator</td><td><code>a &lt;= b</code></td></tr><tr><td><code>&gt;</code></td><td>returns true if the value of the left operand is greater than the right operator</td><td><code>a &gt; b</code></td></tr><tr><td><code>&lt;</code></td><td>returns true if the value of the left operand is lower than the right operator</td><td><code>a &lt; b</code></td></tr></tbody></table><p>The following operators are used for logical operations, in general, the operands for these should be boolean variables or expressions. </p><table><thead><tr><th>Operator</th><th>Function</th><th>Example</th></tr></thead><tbody><tr><td><code>!</code></td><td>not, changes <code>false</code> to <code>true</code> and <code>true</code> to <code>false</code></td><td><code>!a</code></td></tr><tr><td><code>&amp;&amp;</code></td><td>and, return <code>true</code> if and only if both operands are <code>true</code></td><td><code>a == b &amp;&amp; c &gt; a</code></td></tr><tr><td>&#124;&#124;</td><td>or, returns <code>true</code> if and only if at least one of the operands is <code>true</code></td><td><code>a == b</code> &#124;&#124; <code>a &gt; b</code></td></tr></tbody></table><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">structure of if...else statements:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(boolean statement)&#123;</span></span><br><span class="line"><span class="comment">    what to do if statement is true</span></span><br><span class="line"><span class="comment">&#125; else &#123;</span></span><br><span class="line"><span class="comment">    what to do if statement is false</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"EQUAL"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> equal;</span><br><span class="line">    equal = (a == b);                   <span class="comment">// boolean variables can be assigned</span></span><br><span class="line">                                        <span class="comment">// boolean statements</span></span><br><span class="line">    <span class="keyword">if</span>(!equal)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NOT EQUAL"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a + b == <span class="number">10</span>)&#123;                    <span class="comment">// arithmetic expressions go before</span></span><br><span class="line">                                        <span class="comment">// boolean statements</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"SUM TO 10"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"DO NOT SUM TO 10"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h2><p>“I go to school until the end of the term” is a loop statement. In this sentence, we have a condition “until the end of the term” and an action “I go to school”. While “the time is not the end of the term”, “I go to school”.</p><h3 id="The-“for”-Statement"><a href="#The-“for”-Statement" class="headerlink" title="The “for” Statement"></a>The “for” Statement</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Line_A; statement; Line_B)&#123;</span><br><span class="line">    ......;</span><br><span class="line">    ......;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Line_A</code> is executed in the beginning of the loop; <code>Line_B</code> is executed at the end of every cycle. An example for statement may be,</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    s[i] = s[i] + <span class="number">1</span>;</span><br><span class="line">    book[s[i]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code would run <code>5</code> times, adding <code>1</code> to <code>s[1...5]</code>, and setting <code>book[s[1....5]]</code> to <code>true</code>.</p><h3 id="The-“while”-Statement"><a href="#The-“while”-Statement" class="headerlink" title="The “while” Statement"></a>The “while” Statement</h3><p>Below is a template of the while statement:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(statement)&#123;</span><br><span class="line">    ......;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>While the statement is true, the lines within the large brackets are executed. An example while statement is below,<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[l] &gt; s[r]) r--;</span><br><span class="line">    <span class="keyword">else</span> l++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="“Continue”-amp-“Break”-Keyword"><a href="#“Continue”-amp-“Break”-Keyword" class="headerlink" title="“Continue” &amp; “Break” Keyword"></a>“Continue” &amp; “Break” Keyword</h2><p>There are two keywords that may be used in loops to essentially jump around in the loop,</p><table><thead><tr><th>keyword</th><th>function</th></tr></thead><tbody><tr><td>continue</td><td>skip the remaining of this cycle (if used in a for loop, the end-cycle line still executes)</td></tr><tr><td>break</td><td>exit the loop</td></tr></tbody></table><p>Below is an example<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The output would be:<br><code>1</code><br><code>2</code><br><code>4</code></p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Solve <code>A Mindbending Scenario</code> and <code>The Trenmendous Tak-Tak Tree</code> on Orac.</p>]]></content>
      
      
      <categories>
          
          <category> Basic C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic C++: IO &amp; Variables &amp; Simple Arithmetics</title>
      <link href="/TPS-CS/Basic-C++/Basic-C-IO-Variables-Simple-Arithmetics/"/>
      <url>/TPS-CS/Basic-C++/Basic-C-IO-Variables-Simple-Arithmetics/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.onlinegdb.com/myfiles" target="_blank" rel="noopener">https://www.onlinegdb.com/myfiles</a><br>See:<br>IO: <a href="https://thyroidr.github.io/Basic-C++/input-output/">https://thyroidr.github.io/Basic-C++/input-output/</a> then students do “Hello World!”<br>Variables: <a href="https://thyroidr.github.io/Basic-C++/variables/">https://thyroidr.github.io/Basic-C++/variables/</a> then students declare and print variable.</p><h2 id="Simple-Arithmetics"><a href="#Simple-Arithmetics" class="headerlink" title="Simple Arithmetics"></a>Simple Arithmetics</h2><h3 id="Unitary-Operators"><a href="#Unitary-Operators" class="headerlink" title="Unitary Operators"></a>Unitary Operators</h3><table><thead><tr><th>Operators</th><th>Operation</th><th>Placement</th><th>Example</th></tr></thead><tbody><tr><td>++</td><td>Add 1 to the operand</td><td>In front of or after the operand</td><td><code>++a</code> or <code>a++</code></td></tr><tr><td>–</td><td>Subtract 1 from the operand</td><td>In front of or after the operand</td><td><code>--a</code> or <code>a--</code></td></tr></tbody></table><a id="more"></a><h3 id="Binary-Operators"><a href="#Binary-Operators" class="headerlink" title="Binary Operators"></a>Binary Operators</h3><table><thead><tr><th>Operators</th><th>Operation</th><th>Placement</th><th>Example</th></tr></thead><tbody><tr><td><code>=</code></td><td>Assigns the value of the back operand to the front operand</td><td>Between operands</td><td><code>a = b</code></td></tr><tr><td><code>+</code></td><td>Returns the sum of two operands</td><td>Between operands</td><td><code>a + b</code></td></tr><tr><td><code>-</code></td><td>Returns the difference between the two operands</td><td>Between operands</td><td><code>a - b</code></td></tr><tr><td><code>*</code></td><td>Returns the product of the two operands</td><td>Between operands</td><td><code>a * b</code></td></tr><tr><td><code>/</code></td><td>Returns the quotient of the two operands (rounded down if needed)</td><td>Between operands</td><td><code>a / b</code></td></tr><tr><td><code>%</code></td><td>Returns the remainder of the two operands</td><td>Between operands</td><td><code>a % b</code></td></tr></tbody></table><p>Having a <code>=</code> sign after a binary operator other than <code>=</code> is equivalent to operate then assign, e.g.<br><code>a += b</code> is equivalent to <code>a = a + b</code>. </p><p>Students then solve <code>Addition</code> and <code>Sitting or Standing?</code> on Orac if time permits.</p>]]></content>
      
      
      <categories>
          
          <category> Basic C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Course Outline</title>
      <link href="/TPS-CS/Course-Outline/"/>
      <url>/TPS-CS/Course-Outline/</url>
      
        <content type="html"><![CDATA[<center>“Computer science is no more about computers than astronomy is about telescopes” - Edsger Dijkstra</center><p>Course delivered by Ryan Wang (current year 11 student at Bundah). </p><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>The course is aimed to improve students’ problem solving abilities and computational thinking. Skills developed are applicable in other STEM subjects. Contents covered are also mostly part of Undergraduate CS courses. This course targets and should be of interest to anyone interested in CS. Examples of contents that will be covered down the track include: Dijkstra’s shortest algorithm, Dynamic Programming, Monotone data structures, Algorithmic analysis. </p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>The the first few lessons students will unfortunately have to use online IDEs (<a href="https://www.onlinegdb.com/myfiles" target="_blank" rel="noopener">https://www.onlinegdb.com/myfiles</a> is acceptable). Compilers and editors will hopefully be installed on school computers (or student computers if they wish to bring them) later on. The course will be taught using C++ (don’t stress, we will only need the very basics of C++). The focus is not on the programming language, rather, it is on the algorithms that are applicable to all programming languages. </p><p>Each lesson will run for 60-90 minutes. Each lesson will start off with a lecture for 20 to 30 minutes, during which theoretical contents will be covered and students do not need their computers for programming (please use pen &amp; paper to take notes). The lesson will then move to lab time, during which students implement and (hopefully) extend beyond what the lecture has covered. Lab and lecture time will be mixed in the first few lessons.</p><p>Students will need to solve problems on the training site by Australian Informatics Olympiad Committee at <a href="http://orac.amt.edu.au/cgi-bin/train/hub.pl" target="_blank" rel="noopener">http://orac.amt.edu.au/cgi-bin/train/hub.pl</a>. Help can be found at my blog for computer science, <a href="https://thyroidr.github.io">https://thyroidr.github.io</a> under the Basic-C++ category. In addition, all lecture notes will be available at <a href="https://thyroidr.github.io/TLPS-CS">https://thyroidr.github.io/TLPS-CS</a>.</p><h2 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h2><table><thead><tr><th>Week</th><th>Content</th><th>Other</th></tr></thead><tbody><tr><td>3</td><td>Basic C++: IO &amp; Variables &amp; Simple Arithmetics</td><td>Solve Addition and Sitting or Standing?</td></tr><tr><td>6</td><td>Basic C++: Conditional statements &amp; loops</td><td></td></tr><tr><td>7</td><td>Basic C++: Functions</td><td></td></tr><tr><td>8</td><td>Binary search and simple algorithmic analysis</td><td>Actual computer science</td></tr><tr><td>10</td><td>Solving trivial problems</td><td>May not take place</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
